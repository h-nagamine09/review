#------------------------------------------------------------------------------------------
# 2次元配列を作る
player ="盗賊"
team_a = ["勇者","戦士","魔法使い",player]
p team_a
puts team_a[1]

team_b = [team_a[0],team_a[1],team_a[2]]
p team_b
puts team_b[0]

team_c = ["勇者", "戦士","魔法使い"]
team_d = ["盗賊","忍者","商人"]
team_e = ["スライム","ドラゴン","魔王"]
teams = [team_c,team_d,team_e]
p teams
p teams[2]
p teams[0][0]
p teams[1][1]
p teams[2][0]

# 配列の中身を出力してみよう
# 期待する出力値
# ["勇者","忍者","武士"]
array = [["勇者","忍者","武士",],["戦士","僧侶","魔法使い"]]
# この下で、arrayを出力してみよう
 p array[0]

 # 2次元配列の中身を出力してみよう
#  期待する出力値
# "魔法使い"
array = [["勇者","忍者","武士",],["戦士","僧侶","魔法使い"]]
# この下で、arrayを出力してみよう
p array[1][2]

# 2次元配列を作成してみよう
# 期待する出力値
# [["木の棒", "こん棒", "エクスカリバー"], ["おにぎり", "おにぎり", "むぎ茶"], ["毒消し", "薬草", "アイアンシールド"]]
item_1 = ["木の棒", "こん棒", "エクスカリバー"]
item_2 = ["おにぎり", "おにぎり", "むぎ茶"]
item_3 = ["毒消し", "薬草", "アイアンシールド"]

# item_1 ~ 3を、basket配列に代入して、pメソッドで出力してください。
basket = [item_1,item_2,item_3]
p basket

#------------------------------------------------------------------------------------------
# 2次元配列の基本操作1
team_a = ["勇者", "戦士","魔法使い"]
team_b = ["盗賊","忍者","商人"]
team_c = ["スライム","ドラゴン","魔王"]
teams = [team_a,team_b,team_c]
p teams
p teams[0]
p teams[0][1]
p teams[0][2]
p teams[0][0]

teams[0][1] = "魔道士"
p teams
p teams.length
p teams[0].length

# 2次元配列に要素を追加する
# 期待する出力値
# [["木の棒", "こん棒", "石斧"], ["おにぎり", "おにぎり", "むぎ茶"], ["毒消し", "薬草", "アイアンシールド"]]
basket = [["木の棒", "こん棒", "エクスカリバー"], ["おにぎり", "おにぎり", "むぎ茶"], ["毒消し", "薬草", "アイアンシールド"]]

# ここに、要素を追加するコードを記述する
basket[0][2] = "石斧"
p basket
# 2次元配列の要素の個数を出力する
# 期待する出力値
# 3
basket = [["木の棒", "こん棒"], ["おにぎり", "おにぎり", "むぎ茶"], ["アイアンシールド"], ["毒消し","毒消し","毒消し","毒消し"]]

# ここに、要素の個数を出力するコードを記述する
p basket[1].length

#------------------------------------------------------------------------------------------
# 2次元配列の基本操作 その2

teams = [["勇者", "戦士"], ["盗賊", "忍者", "商人"], ["スライム", "ドラゴン", "魔王"], ["魔法使い"]]
p teams

teams.push(["メタルモンスター","シルバーモンスター","ブラックモンスター"])
p teams
p teams.length

teams[0].push ("レッドドラゴン")
p teams
p teams.length
p teams[0].length

teams.delete_at(1)
p teams
p teams.length

teams[0].delete_at(1)
p teams
p teams.length
p teams[0].length

# 2次元配列に要素を追加する

basket = [["木の棒", "こん棒", "エクスカリバー"], ["おにぎり", "おにぎり", "むぎ茶"], ["毒消し", "薬草", "アイアンシールド"]]

# ここに、要素を追加するコードを記述する
# 期待する出力値
# [["木の棒", "こん棒", "エクスカリバー", "石斧"], ["おにぎり", "おにぎり", "むぎ茶"], ["毒消し", "薬草", "アイアンシールド"]]
basket[0].push("石斧")#pushメソッドで要素を追加引数に追加したいワードを記述
p basket

# 2次元配列に要素を削除する
# 右のコードエリアには、basket配列が定義されています。
# この配列から、「アイアンシールド」を削除してください。
#  期待する出力値
# [["木の棒", "こん棒", "エクスカリバー"], ["おにぎり", "おにぎり", "むぎ茶"], ["毒消し", "薬草"]]
# #

basket = [["木の棒", "こん棒", "エクスカリバー"], ["おにぎり", "おにぎり", "むぎ茶"], ["毒消し", "薬草", "アイアンシールド"]]

# ここに、要素を削除するコードを記述する
basket[2].delete_at(2) #削除はdelete_atメソッドを使用し,引数に削除したいインデックスの番号を記述

p basket


#------------------------------------------------------------------------------------------
#配列の中身をループで表示する

enemies = ["スライム", "モンスター", "ゾンビ", "ドラゴン", "魔王"]
# ここに、要素をループで表示するコードを記述する
enemies.each_with_index do |enemy,index|
    puts "#{index + 1}番目の#{enemy}が現れた!"
end


# 各要素を3倍にして新しい配列を作成する
# 期待する出力値
# [36, 102, 168, 234, 270]

numbers = [12, 34, 56, 78, 90]

# ここに、各要素を3倍にして新しい配列を作成するコードを記述する
numbers2 = numbers.map do |n|
    n * 3
end


p numbers2

#------------------------------------------------------------------------------------------
# 2次元配列をmapで作成する
numbers = Array.new(10,1 )
p numbers
p numbers.length

numbers2 = Array.new(4, Array.new(3,1))
numbers2[0][1] = 2
p numbers2
p numbers2.length

numbers3 = Array.new(4).map{Array.new(5, 5)}
numbers3[0][1] = 2
p numbers3

# Array.newで配列を作成してみよう
# 期待する出力値
# ["paiza", "paiza", "paiza", "paiza", "paiza"]
paiza = Array.new(5,"paiza")
p paiza

# 2次元配列を作成してみよう
# 右のコードエリアで、Array.newとmapメソッドを使って、次のような2次元配列を作成して、pメソッドで出力してください。
#
# ・要素数は、5個
# ・[7,7,7,7]という配列を要素にする
answer = Array.new(5).map{Array.new(4,7)}
p answer
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
